[{"/Users/Phemitj/Documents/Soar-Digital/pdf-extract/react-test/pdfjs/src/index.js":"1","/Users/Phemitj/Documents/Soar-Digital/pdf-extract/react-test/pdfjs/src/reportWebVitals.js":"2","/Users/Phemitj/Documents/Soar-Digital/pdf-extract/react-test/pdfjs/src/App.js":"3","/Users/Phemitj/Documents/Soar-Digital/pdf-extract/react-test/pdfjs/src/App3.js":"4","/Users/Phemitj/Documents/Soar-Digital/pdf-extract/react-test/pdfjs/src/App2.js":"5","/Users/Phemitj/Documents/Soar-Digital/pdf-extract/react-test/pdfjs/src/App4.js":"6","/Users/Phemitj/Documents/Soar-Digital/pdf-extract/react-test/pdfjs/src/App5.js":"7"},{"size":501,"mtime":1613044733259,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1610787580603,"results":"10","hashOfConfig":"9"},{"size":4643,"mtime":1611147480605,"results":"11","hashOfConfig":"9"},{"size":3419,"mtime":1612957788739,"results":"12","hashOfConfig":"9"},{"size":3108,"mtime":1612953716304,"results":"13","hashOfConfig":"9"},{"size":3654,"mtime":1613043365721,"results":"14","hashOfConfig":"9"},{"size":844,"mtime":1613044757205,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1pmxdjt",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"/Users/Phemitj/Documents/Soar-Digital/pdf-extract/react-test/pdfjs/src/index.js",[],["38","39"],"/Users/Phemitj/Documents/Soar-Digital/pdf-extract/react-test/pdfjs/src/reportWebVitals.js",[],"/Users/Phemitj/Documents/Soar-Digital/pdf-extract/react-test/pdfjs/src/App.js",["40","41","42"],"import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [pageNumber, setPageNumber] = useState(1);\n  const [loadingPdf, setLoadingPdf] = useState(null);\n\n  useEffect(() => {\n    handlePdf();\n    return () => {\n      clearState();\n    };\n  }, []);\n\n  const handlePdf = () => {\n    console.log(window);\n\n    const proxyurl = 'https://cors-anywhere.herokuapp.com/';\n    var url =\n      'http://api-dev.thenewspaperstand.com/uploads/file-1610792719302.pdf';\n\n    let pdfjsLib = window.pdfjsLib;\n\n    pdfjsLib.GlobalWorkerOptions.workerSrc =\n      '//mozilla.github.io/pdf.js/build/pdf.worker.js';\n\n    // Asynchronous download of PDF\n\n    var loadingTask = pdfjsLib.getDocument(proxyurl + url);\n    loadingTask.promise.then(\n      function (pdf) {\n        console.log('PDF loaded', pdf._pdfInfo.numPages);\n        setLoadingPdf(pdf);\n\n        // Fetch the first page\n        //var pageNumber = 1;\n        let totalPages = pdf._pdfInfo.numPages;\n        for (let i = 1; i < 5; i++) {\n          console.log('gets here');\n          pdf.getPage(i).then(function (page) {\n            console.log('Page loaded', i);\n\n            var scale = 1.5;\n            var viewport = page.getViewport({ scale: scale });\n\n            // Prepare canvas using PDF page dimensions\n            // var canvas = document.getElementById('the-canvas');\n            // var context = canvas.getContext('2d');\n            // console.log(canvas);\n            // canvas.height = viewport.height;\n            // canvas.width = viewport.width;\n\n            var canvas = document.createElement('canvas');\n            document.getElementById('the-canvas').append(canvas);\n\n            canvas.id = `the-canvas-${i}`;\n            //console.log(`the-canvas-${i}`);\n\n            //var canvas = document.getElementById(`the-canvas-${i}`);\n            console.log(canvas);\n            var context = canvas.getContext('2d');\n\n            canvas.height = viewport.height;\n            canvas.width = viewport.width;\n\n            // Render PDF page into canvas context\n            var renderContext = {\n              canvasContext: context,\n              viewport: viewport,\n            };\n            var renderTask = page.render(renderContext);\n            renderTask.promise.then(function () {\n              console.log('Page rendered');\n              if (i === 1) {\n                //console.log(canvas.toDataURL('image/jpeg'));\n\n                var file = dataURLtoFile(\n                  canvas.toDataURL('image/jpeg'),\n                  'page1.png'\n                );\n                console.log(file);\n              }\n            });\n          });\n        }\n      },\n      function (reason) {\n        // PDF loading error\n        console.error(reason);\n      }\n    );\n  };\n\n  const clearState = () => {\n    console.log('here');\n  };\n\n  function dataURLtoFile(dataurl, filename) {\n    var arr = dataurl.split(','),\n      mime = arr[0].match(/:(.*?);/)[1],\n      bstr = atob(arr[1]),\n      n = bstr.length,\n      u8arr = new Uint8Array(n);\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    return new File([u8arr], filename, { type: mime });\n  }\n\n  const converToImg = () => {\n    const pdf = loadingPdf;\n    pdf.getPage(1).then((page) => {\n      var canvas = document.createElement('canvas');\n\n      var dataURL = canvas.toDataURL();\n      console.log(dataURL);\n    });\n  };\n\n  const getPage = () => {\n    const pdf = loadingPdf;\n    setPageNumber(pageNumber + 1);\n    pdf.getPage(pageNumber + 1).then(function (page) {\n      console.log('Page loaded');\n\n      var scale = 1.5;\n      var viewport = page.getViewport({ scale: scale });\n\n      // Prepare canvas using PDF page dimensions\n      var canvas = document.getElementById('the-canvas');\n      var context = canvas.getContext('2d');\n      canvas.height = viewport.height;\n      canvas.width = viewport.width;\n\n      // Render PDF page into canvas context\n      var renderContext = {\n        canvasContext: context,\n        viewport: viewport,\n      };\n      var renderTask = page.render(renderContext);\n      renderTask.promise.then(function () {\n        console.log('Page rendered');\n      });\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>PDF.js 'Hello, world!' example</h1>\n      <div id=\"the-canvas\"></div>\n\n      <div className=\"control-section\">\n        <button onClick={() => setPageNumber(pageNumber - 1)}>previous</button>\n        <button\n          onClick={() => {\n            //setPageNumber(pageNumber + 1);\n            converToImg();\n          }}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",["43","44"],"/Users/Phemitj/Documents/Soar-Digital/pdf-extract/react-test/pdfjs/src/App3.js",["45","46","47"],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nlet pdfjsLib;\n\nfunction App() {\n  const [pageNumber, setPageNumber] = useState(1);\n  const [loadingPdf, setLoadingPdf] = useState(null);\n  const [thumbnail, setThumbnail] = useState(null);\n  const [pdfFile, setPdfFile] = useState(null);\n\n  useEffect(() => {\n    //handlePdf();\n    pdfjsLib = window.pdfjsLib;\n    return () => {\n      clearState();\n    };\n  }, []);\n\n  const handlePdf = (e) => {\n    console.log(pdfjsLib);\n    pdfjsLib.disableWorker = true;\n\n    // Asynchronous download of PDF\n\n    let file = e.target.files[0];\n    // console.log(file);\n    setPdfFile(file);\n    let fileReader = new FileReader();\n    fileReader.onload = function (ev) {\n      var loadingTask = pdfjsLib.getDocument(fileReader.result);\n      loadingTask.promise.then(\n        function (pdf) {\n          console.log('PDF loaded', pdf._pdfInfo.numPages);\n          setLoadingPdf(pdf);\n\n          // Fetch the first page\n          //var pageNumber = 1;\n          //let totalPages = pdf._pdfInfo.numPages;\n          for (let i = 1; i < 5; i++) {\n            //console.log('gets here');\n            pdf.getPage(i).then(function (page) {\n              //console.log('Page loaded', i);\n\n              var scale = 1.5;\n              var viewport = page.getViewport({ scale: scale });\n\n              var canvas = document.createElement('canvas');\n              document.getElementById('the-canvas').append(canvas);\n\n              canvas.id = `the-canvas-${i}`;\n\n              console.log(canvas);\n              var context = canvas.getContext('2d');\n\n              canvas.height = viewport.height;\n              canvas.width = viewport.width;\n\n              // Render PDF page into canvas context\n              var renderContext = {\n                canvasContext: context,\n                viewport: viewport,\n              };\n              var renderTask = page.render(renderContext);\n              renderTask.promise.then(function () {\n                console.log('Page rendered');\n                if (i === 1) {\n                  var file = dataURLtoFile(\n                    canvas.toDataURL('image/jpeg'),\n                    'page1.png'\n                  );\n                  setThumbnail(file);\n                }\n              });\n            });\n          }\n        },\n        function (reason) {\n          // PDF loading error\n          console.error(reason);\n        }\n      );\n    };\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  const clearState = () => {\n    console.log('here');\n  };\n\n  function dataURLtoFile(dataurl, filename) {\n    console.log(dataurl);\n    var arr = dataurl.split(','),\n      mime = arr[0].match(/:(.*?);/)[1],\n      bstr = atob(arr[1]),\n      n = bstr.length,\n      u8arr = new Uint8Array(n);\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    return new File([u8arr], filename, { type: mime });\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>PDF.js 'Hello, world!' example</h1>\n      <div style={{ border: '1px solid #fff', margin: '10px' }}>\n        <h3>Upload pdf</h3>\n        <input type=\"file\" id=\"pdf\" onChange={handlePdf} />\n        <button\n          onClick={() => {\n            console.log('>> thunbnail', thumbnail);\n            console.log('>> pdf', pdfFile);\n          }}\n        >\n          Post\n        </button>\n      </div>\n      <div id=\"the-canvas\"></div>\n    </div>\n  );\n}\n\nexport default App;\n",["48","49"],"/Users/Phemitj/Documents/Soar-Digital/pdf-extract/react-test/pdfjs/src/App2.js",["50"],"/Users/Phemitj/Documents/Soar-Digital/pdf-extract/react-test/pdfjs/src/App4.js",["51","52","53","54","55","56","57","58","59","60","61"],"import React, { useEffect, useState } from 'react';\nimport $ from 'jquery';\nimport './App.css';\nlet pdfjsLib;\n\nfunction App() {\n  const [pageNumber, setPageNumber] = useState(1);\n  const [loadingPdf, setLoadingPdf] = useState(null);\n  const [thumbnail, setThumbnail] = useState(null);\n  const [pdfFile, setPdfFile] = useState(null);\n\n  useEffect(() => {\n    //handlePdf();\n    pdfjsLib = window.pdfjsLib;\n    handlePdf();\n    // handleTry();\n    return () => {\n      clearState();\n    };\n  }, []);\n\n  const handlePdf = () => {\n    console.log(pdfjsLib);\n    pdfjsLib.disableWorker = true;\n\n    // Asynchronous download of PDF\n\n    // 'http://localhost:3000/fetch?url=http://api-dev.thenewspaperstand.com/uploads/file-1610792719302.pdf'\n\n    var loadingTask = pdfjsLib.getDocument(\n      'https://tns-upload.s3.us-east-2.amazonaws.com/pdf/Nelson/2021-02-10/tests.pdf'\n    );\n    loadingTask.promise.then(\n      function (pdf) {\n        console.log('PDF loaded', pdf._pdfInfo.numPages);\n        setLoadingPdf(pdf);\n\n        // Fetch the first page\n        //var pageNumber = 1;\n        //let totalPages = pdf._pdfInfo.numPages;\n        for (let i = 1; i < 10; i++) {\n          //console.log('gets here');\n          pdf.getPage(i).then(function (page) {\n            //console.log('Page loaded', i);\n\n            var scale = 1.5;\n            var viewport = page.getViewport({ scale: scale });\n\n            var canvas = document.createElement('canvas');\n            document.getElementById('the-canvas').append(canvas);\n\n            canvas.id = `the-canvas-${i}`;\n\n            console.log(canvas);\n            var context = canvas.getContext('2d');\n\n            canvas.height = viewport.height;\n            canvas.width = viewport.width;\n\n            // Render PDF page into canvas context\n            var renderContext = {\n              canvasContext: context,\n              viewport: viewport,\n            };\n            var renderTask = page.render(renderContext);\n            renderTask.promise.then(function () {\n              console.log('Page rendered');\n            });\n          });\n        }\n      },\n      function (reason) {\n        // PDF loading error\n        console.error(reason);\n      }\n    );\n  };\n\n  const clearState = () => {\n    console.log('here');\n  };\n\n  var BASE64_MARKER = ';base64,';\n\n  function convertDataURIToBinary(dataURI) {\n    var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;\n    var base64 = dataURI.substring(base64Index);\n    var raw = window.atob(base64);\n    var rawLength = raw.length;\n    var array = new Uint8Array(new ArrayBuffer(rawLength));\n\n    for (var i = 0; i < rawLength; i++) {\n      array[i] = raw.charCodeAt(i);\n    }\n    return array;\n  }\n\n  function toDataUrl(url, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.onload = function () {\n      var reader = new FileReader();\n      reader.onloadend = function () {\n        callback(reader.result);\n      };\n      reader.readAsDataURL(xhr.response);\n    };\n    xhr.open('GET', url);\n    xhr.responseType = 'blob';\n    xhr.send();\n  }\n\n  function dataURLtoFile(dataurl, filename) {\n    var arr = dataurl.split(','),\n      mime = arr[0].match(/:(.*?);/)[1],\n      bstr = atob(arr[1]),\n      n = bstr.length,\n      u8arr = new Uint8Array(n);\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    return new File([u8arr], filename, { type: mime });\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>PDF.js 'Hello, world!' example</h1>\n      <div style={{ border: '1px solid #fff', margin: '10px' }}>\n        <h3>Upload pdf</h3>\n      </div>\n      <div id=\"the-canvas\"></div>\n    </div>\n  );\n}\n\nexport default App;\n",["62","63"],"/Users/Phemitj/Documents/Soar-Digital/pdf-extract/react-test/pdfjs/src/App5.js",[],["64","65"],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":13,"column":6,"nodeType":"72","endLine":13,"endColumn":8,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":37,"column":13,"nodeType":"76","messageId":"77","endLine":37,"endColumn":23},{"ruleId":"74","severity":1,"message":"78","line":122,"column":9,"nodeType":"76","messageId":"77","endLine":122,"endColumn":16},{"ruleId":"66","replacedBy":"79"},{"ruleId":"68","replacedBy":"80"},{"ruleId":"74","severity":1,"message":"81","line":6,"column":10,"nodeType":"76","messageId":"77","endLine":6,"endColumn":20},{"ruleId":"74","severity":1,"message":"82","line":6,"column":22,"nodeType":"76","messageId":"77","endLine":6,"endColumn":35},{"ruleId":"74","severity":1,"message":"83","line":7,"column":10,"nodeType":"76","messageId":"77","endLine":7,"endColumn":20},{"ruleId":"66","replacedBy":"84"},{"ruleId":"68","replacedBy":"85"},{"ruleId":"70","severity":1,"message":"71","line":12,"column":6,"nodeType":"72","endLine":12,"endColumn":8,"suggestions":"86"},{"ruleId":"74","severity":1,"message":"87","line":2,"column":8,"nodeType":"76","messageId":"77","endLine":2,"endColumn":9},{"ruleId":"74","severity":1,"message":"81","line":7,"column":10,"nodeType":"76","messageId":"77","endLine":7,"endColumn":20},{"ruleId":"74","severity":1,"message":"82","line":7,"column":22,"nodeType":"76","messageId":"77","endLine":7,"endColumn":35},{"ruleId":"74","severity":1,"message":"83","line":8,"column":10,"nodeType":"76","messageId":"77","endLine":8,"endColumn":20},{"ruleId":"74","severity":1,"message":"88","line":9,"column":10,"nodeType":"76","messageId":"77","endLine":9,"endColumn":19},{"ruleId":"74","severity":1,"message":"89","line":9,"column":21,"nodeType":"76","messageId":"77","endLine":9,"endColumn":33},{"ruleId":"74","severity":1,"message":"90","line":10,"column":10,"nodeType":"76","messageId":"77","endLine":10,"endColumn":17},{"ruleId":"74","severity":1,"message":"91","line":10,"column":19,"nodeType":"76","messageId":"77","endLine":10,"endColumn":29},{"ruleId":"74","severity":1,"message":"92","line":85,"column":12,"nodeType":"76","messageId":"77","endLine":85,"endColumn":34},{"ruleId":"74","severity":1,"message":"93","line":98,"column":12,"nodeType":"76","messageId":"77","endLine":98,"endColumn":21},{"ruleId":"74","severity":1,"message":"94","line":112,"column":12,"nodeType":"76","messageId":"77","endLine":112,"endColumn":25},{"ruleId":"66","replacedBy":"95"},{"ruleId":"68","replacedBy":"96"},{"ruleId":"66","replacedBy":"97"},{"ruleId":"68","replacedBy":"98"},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handlePdf'. Either include it or remove the dependency array.","ArrayExpression",["101"],"no-unused-vars","'totalPages' is assigned a value but never used.","Identifier","unusedVar","'getPage' is assigned a value but never used.",["99"],["100"],"'pageNumber' is assigned a value but never used.","'setPageNumber' is assigned a value but never used.","'loadingPdf' is assigned a value but never used.",["99"],["100"],["102"],"'$' is defined but never used.","'thumbnail' is assigned a value but never used.","'setThumbnail' is assigned a value but never used.","'pdfFile' is assigned a value but never used.","'setPdfFile' is assigned a value but never used.","'convertDataURIToBinary' is defined but never used.","'toDataUrl' is defined but never used.","'dataURLtoFile' is defined but never used.",["99"],["100"],["99"],["100"],"no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"103","fix":"105"},"Update the dependencies array to be: [handlePdf]",{"range":"106","text":"107"},{"range":"108","text":"107"},[284,286],"[handlePdf]",[264,266]]